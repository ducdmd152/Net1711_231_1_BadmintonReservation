@{
    ViewData["Title"] = "Index";
}

<div class="row">
    <div class="col-md-10">
        <h2 class="display-8">Purchased List</h2>
    </div>
    <div class="col-md-2 text-end">
        <button type="button" class="btn btn-primary" onclick="add();">
            Add
        </button>
    </div>
</div>

<form id="filterForm" class="d-flex flex-column mb-3 rounded" style="flex: 1; width: 100%; margin-right: 10px;" method="GET">
    <div class="d-flex justify-content-center align-content-center mb-3 rounded" style="width: 100%;">
        <input type="text" style="flex: 1; padding: 8px;" class="search-input" id="searchInput" name="search" placeholder="Search..." value="" onchange="handleInputChange()">
        <button class="btn-primary p-2" type="submit">Search</button>
    </div>
    <div class="d-flex justify-content-center align-items-center mb-3 gap-3 rounded" style="width: 100%;">
        <div class="d-flex flex-column mb-3 rounded">
            <label for="amountHour">Amount Hour</label>
            <input type="number" min="0" id="amountHour" class="form-control" onchange="handleFilterChange()">
        </div>
        <div class="d-flex flex-column mb-3 rounded">
            <label>Purchased Status</label>
            <select id="purchasedStatusFilter" class="form-control" onchange="handleFilterChange()">
                <option value="0" selected>All</option>
                <option value="1">Active</option>
                <option value="2">InActive</option>
            </select>
        </div>
    </div>
    <span class="text-danger" id="TimeError"></span>
    <div class="d-flex justify-content-center align-content-center mb-3 rounded" style="width: 100%;">
    </div>
</form>

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr class="card-header">
                    <th class="card-title text-center">ID</th>
                    <th class="card-title text-center">Amount Hour</th>
                    <th class="card-title text-center">Status Purchased</th>
                    <th class="card-title text-center">Customer Name</th>
                    <th class="card-title text-center">Phone Number</th>
                    <th class="card-title text-center">Payment Amount</th>
                    <th class="card-title text-center">Created Date</th>
                    <th class="card-title text-center">Last Updated Date</th>
                    <th class="card-title text-center"></th>
                </tr>
            </thead>
            <tbody class="tblList">
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="topUpModal" tabindex="-1" aria-labelledby="topUpModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frm" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="topUpModalLabel">Topup Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="topUpModalContent"></div>
                </div>
                <div class="modal-footer">
                    <button id="btSave" type="button" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<nav id="paginationControls" aria-label="Page navigation" style="display: flex; justify-content: center; column-gap: 12px;">
</nav>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            loadData();
        });

        document.getElementById('filterForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Ngăn chặn việc gửi form
        });

        function handleInputChange() {
            loadData();
        }

        function handleFilterChange() {
            loadData();
        }

        function loadData(pageIndex = 1, pageSize = 4) {
            var spin = document.getElementById('spinner-overlay');
            var spin = document.getElementById('spinner-overlay');
            var searchText = document.getElementById('searchInput').value;
            var amountHour = document.getElementById('amountHour').value;
            var purchasedStatusFilter = document.getElementById('purchasedStatusFilter').value;
            spin.classList.remove('invisible');
            $.ajax({
                url: '@Url.Action("GetAll", "Purchased")',
                type: "GET",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                data: {
                    searchText: searchText,
                    amountHour: amountHour,
                    status: purchasedStatusFilter,
                    pageIndex: pageIndex,
                    pageSize: pageSize
                },
                success: function (result) {
                    spin.classList.add('invisible');
                    const statusMap = {
                        1: 'Active',
                        2: 'InActive'
                    };
                    var html = '';
                    // console.log(result);
                    $.each(result.list, function (key, item) {
                        console.log(item);
                        html += '<tr>';
                        html += '<td>' + item.id + '</td>';
                        html += '<td>' + item.amountHour + '</td>';
                        html += '<td>' + statusMap[item.status] + '</td>';
                        html += '<td>' + item.customer.fullName + '</td>';
                        html += '<td>' + item.customer.phoneNumber + '</td>';
                        html += '<td>' + item.payment.amount + ' VND</td>';
                        html += '<td>' + formatDateTime(item.createdDate) + '</td>';
                        html += '<td>' + formatDateTime(item.updatedDate) + '</td>';
                        html += '<td><button type="button" class="btn btn-outline-primary" onclick ="return edit(\'' + item.id + '\')">Edit</button> | <button type="button" class="btn btn-outline-info" onclick="redirectToReport(\'' + item.id + '\')">Report</button> | <button type="button" class="btn btn-outline-danger" onclick ="return deleteItem(\'' + item.id + '\')">Delete</button></td>';
                        html += '</tr>';
                    });
                    $('.tblList').html(html);
                    generatePagination(result.pageIndex, result.totalOfPages);
                },
                error: function (xhr, error) {
                    spin.classList.add('invisible');
                    alert(xhr.statusText);
                    alert(`Something went wrong!`);
                }
            });
        }

        function generatePagination(currentPage, totalPages) {
            var paginationHtml = '';

            if (currentPage > 1) {
                paginationHtml += '<button class="btn btn-outline-secondary" onclick="loadData(' + (currentPage - 1) + ')">Prev</button>';
            }
            else {
                paginationHtml += '<button class="btn btn-outline-secondary" disabled>Prev</button>';
            }

            for (var i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    paginationHtml += '<button class="btn btn-info">' + i + '</button>';
                } else {
                    paginationHtml += '<button class="btn btn-outline-secondary" onclick="loadData(' + i + ')">' + i + '</button>';
                }
            }

            if (currentPage < totalPages) {
                paginationHtml += '<button class="btn btn-outline-secondary"  onclick="loadData(' + (currentPage + 1) + ')">Next</button>';
            }
            else {
                paginationHtml += '<button class="btn btn-outline-secondary" disabled>Next</button>';
            }

            $('#paginationControls').html(paginationHtml);
        }

        function add() {
            $("#topUpModalContent").html("");
            $("#topUpModalLabel").html("Add New");

            $.ajax({
                url: '@Url.Action("Add", "Purchased")',
                type: "GET",
                success: function (result) {
                    $("#topUpModalContent").html(result);
                    $('#topUpModal').modal('show');

                    $("#btSave").off("click").on("click", function () {
                        create();
                    });
                },
                error: function (message) {
                    alert(message);
                }
            });
        }

        function redirectToReport(id) {
            var url = '/Purchased/report/' + id;
            window.location.href = url;
        }

        function edit(id) {
            $("#topUpModalContent").html("");
            $("#topUpModalLabel").html(`Edit purchased [${id}]`);
            $.ajax({
                url: '@Url.Action("Edit", "Purchased")' + '/' + id,
                type: "GET",
                success: function (result) {
                    $("#topUpModalContent").html(result);
                    $('#topUpModal').modal('show');

                    $("#btSave").off("click").on("click", function () {
                        update(id);
                    });
                },
                error: function (message) {
                    alert(message);
                }
            });
        }

        function deleteItem(id) {
            var result = confirm(`Are you sure to delete purchased [${id}]?`);
            if (result) {

                $.ajax({
                    url: '@Url.Action("Delete", "Purchased")' + '/' + id,
                    type: 'DELETE',
                    contentType: 'application/json;charset=utf-8',
                    dataType: "json",
                    success: function (result) {
                        loadData();
                        alert(`Deleted purchased [${id}] sucessfully!`);
                    },
                    error: function (xhr, error) {
                        console.log(xhr);
                        alert(`Something went wrong!`);
                    }
                });
            }
        }

        function convertToISODateTime(dateTimeString) {
            // Create a new Date object from the date-time string
            const date = new Date(dateTimeString);

            // Get the components of the date and time
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-indexed
            const day = date.getDate().toString().padStart(2, '0');
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            const seconds = date.getSeconds().toString().padStart(2, '0');

            // Construct the ISO 8601 date-time string
            const isoDateTime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;

            return isoDateTime;
        }


        function create() {
            var data = {
                AmountHour: $("#AmountHour").val(),
                Status: $("#Status").val(),
                CustomerId: $("#CustomerId").val(),
                PaymentId: $("#PaymentId").val(),
                CreatedDate: new Date().toISOString(),
            };           
            console.log(data);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Create", "Purchased")',
                contentType: 'application/json;charset=utf-8',
                dataType: "json",
                data: JSON.stringify(data),
                success: function (result) {
                    if (result.status >= 1) {
                        $('#topUpModal').modal('hide');
                        loadData();
                        alert("Created new purchased record successfully!");
                    } else {
                        alert("Failed to create purchased record.");
                    }
                },
                error: function (xhr, error) {
                    console.log(xhr);
                    alert(`Something went wrong!`);
                }
            });
        }

        function update(id) {
            var data = {
                Id: id,
                AmountHour: $("#AmountHour").val(),
                Status: $("#Status").val(),
                CustomerId: $("#CustomerId").val(),
                PaymentId: $("#PaymentId").val(),
                UpdatedDate: new Date().toISOString()
            };

            console.log(data);

            $.ajax({
                type: 'PUT',
                url: '@Url.Action("Update", "Purchased")',
                contentType: 'application/json;charset=utf-8',
                dataType: "json",
                data: JSON.stringify(data),
                success: function (result) {
                    if (result.status >= 1) {
                        $('#topUpModal').modal('hide');
                        loadData();
                        alert(`Updated purchased record with ID: ${id} successfully!`);
                    } else {
                        alert("Failed to update purchased record.");
                    }
                },
                error: function (xhr, error) {
                    console.log(xhr);
                    alert(`Something went wrong!`);
                }
            });
        }



        function formatDateTime(dateTimeString, format) {
            var dateTime = new Date(dateTimeString);
            var formattedDateTime = dateTime.toLocaleString(undefined, { timeZone: 'Asia/Bangkok', ...format });

            return formattedDateTime;
        }


    </script>
}